{"version":3,"sources":["components/Previewer/Previewer.jsx","components/Editor/Editor.jsx","App.jsx","index.js"],"names":["Previewer","props","useState","click","setClick","maxed","setMaxed","marked","setOptions","gfm","breaks","className","onClick","handler","id","dangerouslySetInnerHTML","__html","sanitizeHtml","convert","allowedTags","defaults","concat","Editor","content","setContent","hidden","setHidden","styles","htmlFor","type","onInput","e","target","value","clickValue","App","ReactDOM","render","document","getElementById"],"mappings":"mRAwCeA,MAnCf,SAAmBC,GACjB,MAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAYA,OAJAC,IAAOC,WAAW,CAChBC,KAAK,EACLC,QAAQ,IAGR,0BAASC,UAAWN,EAAQ,kBAAoB,YAAhD,UACE,wBAAOM,UAAU,mBAAjB,oBAEE,mBACEC,QAfY,WAClBR,GAAUD,GACVF,EAAMY,UACNP,GAAUD,IAaJM,UAAWR,EAAQ,sBAAwB,yBAE/C,qBACEW,GAAG,UACHH,UAAU,qBACVI,wBAAyB,CACvBC,OAAQC,IAAaV,IAAON,EAAMiB,SAAU,CAC1CC,YAAaF,IAAaG,SAASD,YAAYE,OAAO,CAAC,iB,OCqEpDC,MAjGf,WACE,IA+CA,EAA8BpB,mBA/CnB,6qCA+CX,mBAAOqB,EAAP,KAAgBC,EAAhB,KACA,EAA0BtB,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,oBAAS,GAArC,mBAAOuB,EAAP,KAAeC,EAAf,KACA,EAA0BxB,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAWMqB,EACK,SADLA,EAEI,cAFJA,EAGG,eAGT,OACE,iCACE,0BACEhB,UACEc,EAASE,EAAgBtB,EAAQsB,EAAeA,EAFpD,UAIE,wBAAOhB,UAAU,gBAAgBiB,QAAQ,SAAzC,mBAEE,mBACEhB,QArBU,WAClBR,GAAUD,GACVG,GAAUD,IAoBFM,UAAWR,EAAQ,sBAAwB,yBAE/C,sBAAMW,GAAG,mBAAmBH,UAAU,eAAtC,SACE,0BACEkB,KAAK,OACLf,GAAG,SACHH,UAAU,eACVmB,QAhCW,SAACC,GACpBP,EAAWO,EAAEC,OAAOC,QA2Bd,SAKGV,UAILlB,GACA,cAAC,EAAD,CAAWa,QAASK,EAASV,QA/BhB,kBAAMa,GAAWD,IA+BoBS,WAAY/B,QCjFvDgC,MAVf,WAEE,OACE,qBAAKxB,UAAU,cAAf,SACE,cAAC,EAAD,OCHNyB,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ed46dc8b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport marked from \"marked\";\r\nimport sanitizeHtml from \"sanitize-html\";\r\nimport \"./Previewer.scss\";\r\n\r\nfunction Previewer(props) {\r\n  const [click, setClick] = useState(false);\r\n  const [maxed, setMaxed] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setClick(!click);\r\n    props.handler();\r\n    setMaxed(!maxed);\r\n  };\r\n\r\n  marked.setOptions({\r\n    gfm: true,\r\n    breaks: true,\r\n  });\r\n  return (\r\n    <section className={maxed ? \"previewer maxed\" : \"previewer\"}>\r\n      <label className='previewer__title'>\r\n        Preview\r\n        <i\r\n          onClick={handleClick}\r\n          className={click ? \"fas fa-compress-alt\" : \"fas fa-expand-alt\"}></i>\r\n      </label>\r\n      <div\r\n        id='preview'\r\n        className='previewer__content'\r\n        dangerouslySetInnerHTML={{\r\n          __html: sanitizeHtml(marked(props.convert), {\r\n            allowedTags: sanitizeHtml.defaults.allowedTags.concat([\"img\"]),\r\n          }),\r\n        }}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Previewer;\r\n","import React, { useState } from \"react\";\r\nimport Previewer from \"../Previewer/Previewer\";\r\nimport \"./Editor.scss\";\r\n\r\nfunction Editor() {\r\n  let initial = `    \r\n# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n    }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n    - Some are bulleted.\r\n        - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n\r\n\r\n`;\r\n  const [content, setContent] = useState(initial);\r\n  const [click, setClick] = useState(false);\r\n  const [hidden, setHidden] = useState(false);\r\n  const [maxed, setMaxed] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    setContent(e.target.value);\r\n  };\r\n  const handleClick = () => {\r\n    setClick(!click);\r\n    setMaxed(!maxed);\r\n  };\r\n  const toggleHide = () => setHidden(!hidden);\r\n\r\n  const styles = {\r\n    default: \"editor\",\r\n    hidden: \"editor hide\",\r\n    maxed: \"editor maxed\",\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <section\r\n        className={\r\n          hidden ? styles.hidden : maxed ? styles.maxed : styles.default\r\n        }>\r\n        <label className='editor__title' htmlFor='editor'>\r\n          Editor\r\n          <i\r\n            onClick={handleClick}\r\n            className={click ? \"fas fa-compress-alt\" : \"fas fa-expand-alt\"}></i>\r\n        </label>\r\n        <form id='editor-text-area' className='editor__text'>\r\n          <textarea\r\n            type='text'\r\n            id='editor'\r\n            className='editor__area'\r\n            onInput={handleChange}>\r\n            {content}\r\n          </textarea>\r\n        </form>\r\n      </section>\r\n      {!maxed && (\r\n        <Previewer convert={content} handler={toggleHide} clickValue={click} />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","import './App.scss';\nimport Editor from './components/Editor/Editor';\n\n\nfunction App() {\n\n  return (\n    <div className=\"app-wrapper\">\n      <Editor />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}